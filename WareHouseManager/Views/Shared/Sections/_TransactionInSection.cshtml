@* Transaction In Section *@
@{
    var suppliers = ViewData["AllSuppliers"] as List<WareHouseManager.Models.Supplier>;
    var products = ViewData["AllProducts"] as List<WareHouseManager.Models.Product>;
    var controllerName = ViewData["TransactionInController"] as string ?? "Admin";
    var addAction = ViewData["AddTransactionInAction"] as string ?? "CreateTransactionIn";
    var activeTab = ViewData["ActiveTab"] as string ?? "transaction-tab";
    var displayStyle = activeTab == "transaction-tab" ? "block" : "none";
}
<div id="transaction-tab" class="tab-content" style="display: @displayStyle;">
    <div class="title-bar"
        style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 16px;">
        <h3 style="margin: 0;">Transaction</h3>
        <button type="button" class="btn btn-success" style="height: 38px;" onclick="showAddTransactionInPopup()">
            <i class="fas fa-plus"></i> Add Transaction
        </button>
    </div>
    <div class="transaction-panel">
        <div class="form-group">
            <label for="supplierSelect">Select Supplier</label>
            <select id="supplierSelect" class="form-control">
                <option value="">-- Select Supplier --</option>
                @if (suppliers != null)
                {
                    foreach (var supplier in suppliers)
                    {
                        <option value="@supplier.Id">@supplier.Name</option>
                    }
                }
            </select>
        </div>
        <div class="form-group">
            <label for="productSelect">Select Product</label>
            <select id="productSelect" class="form-control" onchange="updateProductInfo()">
                <option value="">-- Select Product --</option>
                @if (products != null)
                {
                    foreach (var product in products)
                    {
                        <option value="@product.ProductId" data-stock="@product.Stock" data-price="@product.CostPerUnit">
                            @product.ProductName</option>
                    }
                }
            </select>
        </div>
        <div class="product-info">
            <p>Stock: <span id="productStock">N/A</span></p>
            <p>Price per Unit: $<span id="productPrice">N/A</span></p>
        </div>
        <div class="form-group">
            <label for="productQuantity">Quantity</label>
            <input type="number" id="productQuantity" class="form-control" min="1" onchange="updateTotalAmount()" />
        </div>
        <div class="form-group">
            <label for="totalAmount">Total Amount</label>
            <input type="text" id="totalAmount" class="form-control" readonly />
        </div>
        <button class="add-button" onclick="addPendingOrder()">Add to Pending Orders</button>
    </div>
    <div class="pending-orders">
        <h4>Pending Orders</h4>
        <table class="styled-table">
            <thead>
                <tr>
                    <th>Supplier</th>
                    <th>Product</th>
                    <th>Quantity</th>
                    <th>Total</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="pendingOrdersTable">
                <!-- Dynamically populated rows -->
            </tbody>
        </table>
    </div>
    <div class="payment-panel">
        <h4>Payment</h4>
        <div class="form-group">
            <label for="totalPayable">Total Payable</label>
            <input type="text" id="totalPayable" class="form-control" readonly />
        </div>
        <div class="form-group">
            <label for="amountPaid">Amount Paid</label>
            <input type="number" id="amountPaid" class="form-control" min="0" onchange="updateRemainingBalance()" />
        </div>
        <div class="form-group">
            <p>Remaining Balance: $<span id="remainingBalance">0.00</span></p>
        </div>
        <button class="submit-button" type="button" onclick="processPayment()">Pay</button>
    </div>
</div>

<!-- Hidden form for submitting TransactionIn -->
<form id="addTransactionInForm" asp-antiforgery="true" method="post" asp-action="@addAction" asp-controller="@controllerName" style="display:none;">
    <input type="hidden" name="transactionInJson" id="transactionInJson" />
</form>

<script src="/js/dashboard.js"></script>
<!-- Add script to build and submit transactionIn form -->
<script>
// Ensure the Razor-serialized JS objects are set after the DOM is ready
window.addEventListener('DOMContentLoaded', function() {
    // Use Html.Raw to avoid double encoding and ensure valid JSON
    window.suppliersList = JSON.parse('@Html.Raw(System.Text.Json.JsonSerializer.Serialize(suppliers ?? new List<WareHouseManager.Models.Supplier>()))');
    window.productsList = JSON.parse('@Html.Raw(System.Text.Json.JsonSerializer.Serialize(products ?? new List<WareHouseManager.Models.Product>()))');
    console.log('Suppliers List:', window.suppliersList);
    console.log('Products List:', window.productsList);
});

    //Helper to get supplier and product objects from lists
    
    function getSupplierById(id) {
        if (!window.suppliersList) return null;
        // id may be string, ensure type match
        return window.suppliersList.find(s => String(s.id) === String(id));
    }
    function getProductById(id) {
        if (!window.productsList) return null;
        return window.productsList.find(p => String(p.productId ?? p.id) === String(id));
    }

     
function processPayment() {
    // Build details from pending orders table
    const table = document.getElementById('pendingOrdersTable');
    const rows = Array.from(table.rows);
    if (rows.length === 0) {
        alert('Please add at least one product to pending orders.');
        return;
    }
    // Group details by supplierId (assume supplierId is in a hidden cell, e.g., cell[5])
    let supplierGroups = {};
    for (const row of rows) {
        // Get supplierId from hidden cell (cell[5])
        const supplierId = row.cells[5] ? row.cells[5].textContent : null;
        if (!supplierId) continue;
        const supplierObj = getSupplierById(supplierId);
        if (!supplierObj) continue;
        const productId = row.cells[1].textContent;
        const quantity = parseInt(row.cells[2].textContent);
        const productObj = getProductById(productId);
        if (!productObj) continue;
        if (!supplierGroups[supplierId]) {
            supplierGroups[supplierId] = {
                supplier: supplierObj,
                details: []
            };
        }
        supplierGroups[supplierId].details.push({
            id: 0,
            transactionInId: 0,
            transactionIn: null,
            productId: productObj.productId || productObj.id,
            product: productObj,
            quantity: quantity,
            unitPrice: productObj.costPerUnit || productObj.importPrice || 0
        });
    }
    const supplierIds = Object.keys(supplierGroups);
    if (supplierIds.length === 0) {
        alert('No valid suppliers found in pending orders.');
        return;
    }
    // For each supplier, create a form, set JSON, and submit sequentially
    function submitNext(index) {
        if (index >= supplierIds.length) return;
        const supplierId = supplierIds[index];
        const group = supplierGroups[supplierId];
        const transactionIn = {
            id: 0,
            transactionDate: new Date().toISOString(),
            supplierId: group.supplier.id,
            supplier: group.supplier,
            details: group.details
        };
        // Create a hidden form dynamically
        const form = document.createElement('form');
        form.method = 'post';
        form.action = document.getElementById('addTransactionInForm').action;
        form.style.display = 'none';
        // CSRF token
        const csrfInput = document.querySelector('#addTransactionInForm input[name=__RequestVerificationToken]');
        if (csrfInput) {
            const tokenInput = document.createElement('input');
            tokenInput.type = 'hidden';
            tokenInput.name = '__RequestVerificationToken';
            tokenInput.value = csrfInput.value;
            form.appendChild(tokenInput);
        }
        // JSON input
        const jsonInput = document.createElement('input');
        jsonInput.type = 'hidden';
        jsonInput.name = 'transactionInJson';
        jsonInput.value = JSON.stringify(transactionIn);
        form.appendChild(jsonInput);
        document.body.appendChild(form);
        form.submit();
        // Remove the form after submission (optional, for cleanup)
        setTimeout(() => {
            document.body.removeChild(form);
            // Submit next supplier after a short delay
            submitNext(index + 1);
        }, 500);
    }
    submitNext(0);
}
    
    function showAddTransactionInPopup() {
        document.getElementById('popup-overlay').style.display = 'block';
        document.getElementById('add-transactionin-popup').style.display = 'block';
  }  
    function hideAddTransactionInPopup() {
    document.getElementById('popup-overlay').style.display = 'none';
    document.getElementById('add-transactionin-popup').style.display = 'none';
}


</script>
